#!/bin/bash

# üöÄ SCRIPT DE DEPLOY PARA VERCEL COM CONFIGURA√á√ÉO AUTOM√ÅTICA
echo "üöÄ CONFIGURANDO E FAZENDO DEPLOY NA VERCEL..."

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Verificar se .env.production existe
if [ ! -f ".env.production" ]; then
    echo -e "${RED}‚ùå Arquivo .env.production n√£o encontrado!${NC}"
    echo -e "${YELLOW}üí° Crie o arquivo .env.production com:${NC}"
    echo "REACT_APP_API_URL=https://sua-app.onrender.com"
    exit 1
fi

# Ler a URL do backend do .env.production
BACKEND_URL=$(grep "REACT_APP_API_URL=" .env.production | cut -d'=' -f2)

if [ -z "$BACKEND_URL" ]; then
    echo -e "${RED}‚ùå REACT_APP_API_URL n√£o encontrado no .env.production!${NC}"
    exit 1
fi

echo -e "${BLUE}üîó URL do Backend: $BACKEND_URL${NC}"

# Configurar vari√°vel de ambiente na Vercel
echo -e "${YELLOW}‚öôÔ∏è Configurando vari√°vel de ambiente na Vercel...${NC}"
vercel env add REACT_APP_API_URL production <<< "$BACKEND_URL"

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Vari√°vel de ambiente configurada${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è Vari√°vel pode j√° existir, continuando...${NC}"
fi

# Fazer o deploy
echo -e "${YELLOW}üöÄ Fazendo deploy na Vercel...${NC}"
vercel --prod

if [ $? -eq 0 ]; then
    echo -e "${GREEN}üéâ DEPLOY CONCLU√çDO COM SUCESSO!${NC}"
    echo ""
    echo -e "${BLUE}üìã PR√ìXIMOS PASSOS:${NC}"
    echo "1. Anote a URL da Vercel que foi gerada"
    echo "2. Atualize a vari√°vel FRONTEND_URL no Render com essa URL"
    echo "3. Configure OAuth no Google Cloud Console"
    echo "4. Teste sua aplica√ß√£o"
else
    echo -e "${RED}‚ùå Erro no deploy!${NC}"
    echo -e "${YELLOW}üí° Poss√≠veis solu√ß√µes:${NC}"
    echo "1. Verifique se o build est√° funcionando: npm run build"
    echo "2. Verifique se est√° logado na Vercel: vercel login"
    echo "3. Tente novamente: vercel --prod"
    exit 1
fi
